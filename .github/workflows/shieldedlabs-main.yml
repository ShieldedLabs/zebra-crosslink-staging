name: Release on push to main

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  BIN_NAME: zebra-crosslink

jobs:
  build-ubuntu:
    name: Build Ubuntu Binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - cargo_flags: ""
            artifact_title: "zebra-crosslink (Ubuntu)"
            artifact_filename: "zebra-crosslink-ubuntu"
          - cargo_flags: "--features viz_gui"
            artifact_title: "zebra-crosslink-viz (Ubuntu)"
            artifact_filename: "zebra-crosslink-viz-ubuntu"
    runs-on: blacksmith-8vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler libasound2-dev
          version: 1.0

      - name: Build Debug Binary
        env:
          RUSTFLAGS: "-C debuginfo=2"
          OUTPUT_FILE: ./dist/${{ matrix.artifact_filename }}
          OUTPUT_SHA: ./dist/${{ matrix.artifact_filename }}.sha256
        run: |
          cargo build --bin zebrad ${{ matrix.cargo_flags }}
          mkdir -p dist
          cp "target/debug/zebrad" "$OUTPUT_FILE"
          sha256sum "$OUTPUT_FILE" | tee "$OUTPUT_SHA"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_title }}
          path: |
            ./dist/${{ matrix.artifact_filename }}
            ./dist/${{ matrix.artifact_filename }}.sha256
          if-no-files-found: error

  build-arch:
    name: Build Arch Binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - cargo_flags: ""
            artifact_title: "zebra-crosslink (Arch)"
            artifact_filename: "zebra-crosslink-arch"
          - cargo_flags: "--features viz_gui"
            artifact_title: "zebra-crosslink-viz (Arch)"
            artifact_filename: "zebra-crosslink-viz-arch"
    runs-on: blacksmith-8vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - name: Restore Arch build cache
        uses: actions/cache@v4
        with:
          path: |
            .cargo-cache
            archlinux-cache/pacman
          key: arch-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            arch-${{ runner.os }}-

      - name: Build Debug Binary
        shell: bash
        env:
          OUTPUT_FILE: ./dist/${{ matrix.artifact_filename }}
          OUTPUT_SHA: ./dist/${{ matrix.artifact_filename }}.sha256
        run: |
          set -euxo pipefail
          mkdir -p .cargo-cache/registry .cargo-cache/git target archlinux-cache/pacman
          docker run --rm \
            -v "$PWD":/work \
            -v "$PWD/archlinux-cache/pacman":/var/cache/pacman \
            -w /work \
            -e CARGO_HOME=/work/.cargo-cache \
            -e RUSTUP_HOME=/work/.cargo-cache/rustup \
            archlinux:latest bash -lc '
              set -eux
              pacman -Syu --noconfirm --needed \
                base-devel git curl pkgconf openssl clang mold binutils cmake protobuf alsa-lib
              if [ ! -f /work/.cargo-cache/env ]; then
                curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
              fi
              source /work/.cargo-cache/env
              export CC=clang CXX=clang++
              export RUSTFLAGS="-C link-arg=-Wl,-s"
              cargo build --bin zebrad '"${{ matrix.cargo_flags }}"'
            '
          mkdir -p dist
          cp "target/debug/zebrad" "$OUTPUT_FILE"
          sha256sum "$OUTPUT_FILE" | tee "$OUTPUT_SHA"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_title }}
          path: |
            ./dist/${{ matrix.artifact_filename }}
            ./dist/${{ matrix.artifact_filename }}.sha256
          if-no-files-found: error


  build-macos:
    name: Build MacOS Binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - cargo_flags: ""
            artifact_title: "zebra-crosslink (MacOS)"
            artifact_filename: "zebra-crosslink-macos"
          - cargo_flags: "--features viz_gui"
            artifact_title: "zebra-crosslink-viz (MacOS)"
            artifact_filename: "zebra-crosslink-viz-macos"
    runs-on: macos-15-xlarge
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Build (MacOS)
        env:
          RUSTFLAGS: "-C strip=symbols"
          OUTPUT_FILE: ./dist/${{ matrix.artifact_filename }}
          OUTPUT_SHA: ./dist/${{ matrix.artifact_filename }}.sha256
        run: |
          brew install protobuf
          cargo build --bin zebrad ${{ matrix.cargo_flags }}
          mkdir -p dist
          cp "target/debug/zebrad" "$OUTPUT_FILE"
          shasum -a 256 "$OUTPUT_FILE" | tee "$OUTPUT_SHA"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_title }}
          path: |
            ./dist/${{ matrix.artifact_filename }}
            ./dist/${{ matrix.artifact_filename }}.sha256
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [ build-ubuntu, build-arch, build-macos ]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List assets
        id: list_assets
        run: |
          # Produce a newline-delimited list so globbing handles spaces in artifact names
          files=$(find dist -maxdepth 2 -type f -print | sort)
          printf '%s\n' "$files"
          {
            echo "files<<EOF"
            printf '%s\n' "$files"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build release notes
        id: notes
        run: |
          UTC_NOW="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "date=$UTC_NOW" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rel-${{ github.run_id }}-${{ github.sha }}
          name: Zebra Crosslink build for ${{ github.sha }}
          body: |
            Commit: ${{ github.sha }}
            Built at: ${{ steps.notes.outputs.date }}

            Assets:
            - zebra-crosslink-ubuntu
            - zebra-crosslink-ubuntu.sha256
            - zebra-crosslink-viz-ubuntu
            - zebra-crosslink-viz-ubuntu.sha256
            - zebra-crosslink-arch
            - zebra-crosslink-arch.sha256
            - zebra-crosslink-viz-arch
            - zebra-crosslink-viz-arch.sha256
            - zebra-crosslink-macos
            - zebra-crosslink-macos.sha256
            - zebra-crosslink-viz-macos
            - zebra-crosslink-viz-macos.sha256
          files: ${{ steps.list_assets.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
